apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    packagingOptions{
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }

    defaultConfig {
        applicationId "com.modesteam.pardal"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testApplicationId "com.modesteam.pardal.test"
//        testInstrumentationRunner "com.modesteam.pardal.JUnitJacocoTestRunner"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

jacoco {
    version "0.7.1.201405082137"
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.readystatesoftware.sqliteasset:sqliteassethelper:2.0.1'

    androidTestCompile 'com.android.support.test:runner:0.3'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.3'
    // Set this dependency to build and run Espresso tests
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2'
    // Set this dependency to build and run UI Automator tests
    //androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v14:2.1.0'
    compile files('src/main/java/libraries/charts/mpandroidchartlibrary-2-1-0.jar')
    compile files('src/main/java/libraries/valuebarlibrary-1-0-2.jar')
    compile files('src/main/java/libraries/mpandroidchartlibrary-2-1-0.jar')
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
}

sourceSets {
    testLocal {
        java.srcDir file('src/androidTest/')
    }
}


//task localTest(type: Test, dependsOn: assemble) {
//    testClassesDir = sourceSets.testLocal.output.classesDir
//    android.sourceSets.main.java.srcDirs.each { dir ->
//        def buildDir = dir.getAbsolutePath().split('/')
//        buildDir = (buildDir[0..(buildDir.length - 4)] + ['build', 'classes', 'debug']).join('/')
//        sourceSets.testLocal.compileClasspath += files(buildDir)
//        sourceSets.testLocal.runtimeClasspath += files(buildDir)
//    }
//    classpath = sourceSets.testLocal.runtimeClasspath
//    reports.junitXml.destination = file('app/build/test-results/folder')
//}
//
//check.dependsOn localTest

